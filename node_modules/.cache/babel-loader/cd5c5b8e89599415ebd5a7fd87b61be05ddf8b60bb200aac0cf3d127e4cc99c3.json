{"ast":null,"code":"import _objectSpread from \"C:/RR_V3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { db } from './firebase';\nimport { collection, addDoc, getDocs, query, where, doc, deleteDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\nconst reviewsCollection = collection(db, 'reviews');\n\n// Add a new review\nexport const addReview = async reviewData => {\n  try {\n    await addDoc(reviewsCollection, _objectSpread(_objectSpread({}, reviewData), {}, {\n      timestamp: serverTimestamp()\n    }));\n  } catch (error) {\n    console.error(\"Error adding review: \", error);\n    throw new Error('Failed to submit review.');\n  }\n};\n\n// Fetch all reviews (for general display)\nexport const fetchReviews = async () => {\n  try {\n    const snapshot = await getDocs(reviewsCollection);\n    return snapshot.docs.map(doc => _objectSpread({\n      id: doc.id\n    }, doc.data()));\n  } catch (error) {\n    console.error(\"Error fetching reviews: \", error);\n    throw new Error('Failed to load reviews.');\n  }\n};\n\n// Fetch reviews for a specific user\nexport const fetchReviewsByUserId = async userId => {\n  if (!userId) return [];\n  try {\n    const q = query(reviewsCollection, where('userId', '==', userId));\n    const snapshot = await getDocs(q);\n    return snapshot.docs.map(doc => _objectSpread({\n      id: doc.id\n    }, doc.data()));\n  } catch (error) {\n    console.error(\"Error fetching user reviews: \", error);\n    throw new Error('Failed to load your reviews.');\n  }\n};\n\n// Update a review\nexport const updateReview = async (reviewId, newText) => {\n  try {\n    const reviewDoc = doc(db, 'reviews', reviewId);\n    await updateDoc(reviewDoc, {\n      text: newText,\n      lastUpdated: serverTimestamp()\n    });\n  } catch (error) {\n    console.error(\"Error updating review: \", error);\n    throw new Error('Failed to update review.');\n  }\n};\n\n// Delete a review\nexport const deleteReview = async reviewId => {\n  try {\n    const reviewDoc = doc(db, 'reviews', reviewId);\n    await deleteDoc(reviewDoc);\n  } catch (error) {\n    console.error(\"Error deleting review: \", error);\n    throw new Error('Failed to delete review.');\n  }\n};","map":{"version":3,"names":["db","collection","addDoc","getDocs","query","where","doc","deleteDoc","updateDoc","serverTimestamp","reviewsCollection","addReview","reviewData","_objectSpread","timestamp","error","console","Error","fetchReviews","snapshot","docs","map","id","data","fetchReviewsByUserId","userId","q","updateReview","reviewId","newText","reviewDoc","text","lastUpdated","deleteReview"],"sources":["C:/RR_V3/src/firebaseReviews.js"],"sourcesContent":["import { db } from './firebase';\nimport { collection, addDoc, getDocs, query, where, doc, deleteDoc, updateDoc, serverTimestamp } from 'firebase/firestore';\n\nconst reviewsCollection = collection(db, 'reviews');\n\n// Add a new review\nexport const addReview = async (reviewData) => {\n  try {\n    await addDoc(reviewsCollection, {\n      ...reviewData,\n      timestamp: serverTimestamp(),\n    });\n  } catch (error) {\n    console.error(\"Error adding review: \", error);\n    throw new Error('Failed to submit review.');\n  }\n};\n\n// Fetch all reviews (for general display)\nexport const fetchReviews = async () => {\n  try {\n    const snapshot = await getDocs(reviewsCollection);\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n  } catch (error) {\n    console.error(\"Error fetching reviews: \", error);\n    throw new Error('Failed to load reviews.');\n  }\n};\n\n// Fetch reviews for a specific user\nexport const fetchReviewsByUserId = async (userId) => {\n    if (!userId) return [];\n    try {\n        const q = query(reviewsCollection, where('userId', '==', userId));\n        const snapshot = await getDocs(q);\n        return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n    } catch (error) {\n        console.error(\"Error fetching user reviews: \", error);\n        throw new Error('Failed to load your reviews.');\n    }\n};\n\n// Update a review\nexport const updateReview = async (reviewId, newText) => {\n    try {\n        const reviewDoc = doc(db, 'reviews', reviewId);\n        await updateDoc(reviewDoc, { \n            text: newText, \n            lastUpdated: serverTimestamp()\n        });\n    } catch (error) {\n        console.error(\"Error updating review: \", error);\n        throw new Error('Failed to update review.');\n    }\n};\n\n// Delete a review\nexport const deleteReview = async (reviewId) => {\n  try {\n    const reviewDoc = doc(db, 'reviews', reviewId);\n    await deleteDoc(reviewDoc);\n  } catch (error) {\n    console.error(\"Error deleting review: \", error);\n    throw new Error('Failed to delete review.');\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}