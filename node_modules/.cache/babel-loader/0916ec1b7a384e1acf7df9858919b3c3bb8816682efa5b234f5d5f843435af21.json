{"ast":null,"code":"import _objectSpread from \"C:/RR_V3/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nexport const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n  constructor() {\n    this._map = new WeakMap();\n    this._idmap = new Map();\n  }\n  add(schema) {\n    const meta = arguments.length <= 1 ? undefined : arguments[1];\n    this._map.set(schema, meta);\n    if (meta && typeof meta === \"object\" && \"id\" in meta) {\n      if (this._idmap.has(meta.id)) {\n        throw new Error(\"ID \".concat(meta.id, \" already exists in the registry\"));\n      }\n      this._idmap.set(meta.id, schema);\n    }\n    return this;\n  }\n  remove(schema) {\n    this._map.delete(schema);\n    return this;\n  }\n  get(schema) {\n    // return this._map.get(schema) as any;\n    // inherit metadata\n    const p = schema._zod.parent;\n    if (p) {\n      var _this$get;\n      const pm = _objectSpread({}, (_this$get = this.get(p)) !== null && _this$get !== void 0 ? _this$get : {});\n      delete pm.id; // do not inherit id\n      return _objectSpread(_objectSpread({}, pm), this._map.get(schema));\n    }\n    return this._map.get(schema);\n  }\n  has(schema) {\n    return this._map.has(schema);\n  }\n}\n// registries\nexport function registry() {\n  return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/registry();","map":{"version":3,"names":["$output","Symbol","$input","$ZodRegistry","constructor","_map","WeakMap","_idmap","Map","add","schema","meta","arguments","length","undefined","set","has","id","Error","concat","remove","delete","get","p","_zod","parent","_this$get","pm","_objectSpread","registry","globalRegistry"],"sources":["C:/RR_V3/node_modules/zod/dist/esm/v4/core/registries.js"],"sourcesContent":["export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n    constructor() {\n        this._map = new WeakMap();\n        this._idmap = new Map();\n    }\n    add(schema, ..._meta) {\n        const meta = _meta[0];\n        this._map.set(schema, meta);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            if (this._idmap.has(meta.id)) {\n                throw new Error(`ID ${meta.id} already exists in the registry`);\n            }\n            this._idmap.set(meta.id, schema);\n        }\n        return this;\n    }\n    remove(schema) {\n        this._map.delete(schema);\n        return this;\n    }\n    get(schema) {\n        // return this._map.get(schema) as any;\n        // inherit metadata\n        const p = schema._zod.parent;\n        if (p) {\n            const pm = { ...(this.get(p) ?? {}) };\n            delete pm.id; // do not inherit id\n            return { ...pm, ...this._map.get(schema) };\n        }\n        return this._map.get(schema);\n    }\n    has(schema) {\n        return this._map.has(schema);\n    }\n}\n// registries\nexport function registry() {\n    return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/ registry();\n"],"mappings":";AAAA,OAAO,MAAMA,OAAO,GAAGC,MAAM,CAAC,WAAW,CAAC;AAC1C,OAAO,MAAMC,MAAM,GAAGD,MAAM,CAAC,UAAU,CAAC;AACxC,OAAO,MAAME,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,IAAI,GAAG,IAAIC,OAAO,CAAC,CAAC;IACzB,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC3B;EACAC,GAAGA,CAACC,MAAM,EAAY;IAClB,MAAMC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAC,SAAA,GAAAF,SAAA,GAAW;IACrB,IAAI,CAACP,IAAI,CAACU,GAAG,CAACL,MAAM,EAAEC,IAAI,CAAC;IAC3B,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAIA,IAAI,EAAE;MAClD,IAAI,IAAI,CAACJ,MAAM,CAACS,GAAG,CAACL,IAAI,CAACM,EAAE,CAAC,EAAE;QAC1B,MAAM,IAAIC,KAAK,OAAAC,MAAA,CAAOR,IAAI,CAACM,EAAE,oCAAiC,CAAC;MACnE;MACA,IAAI,CAACV,MAAM,CAACQ,GAAG,CAACJ,IAAI,CAACM,EAAE,EAAEP,MAAM,CAAC;IACpC;IACA,OAAO,IAAI;EACf;EACAU,MAAMA,CAACV,MAAM,EAAE;IACX,IAAI,CAACL,IAAI,CAACgB,MAAM,CAACX,MAAM,CAAC;IACxB,OAAO,IAAI;EACf;EACAY,GAAGA,CAACZ,MAAM,EAAE;IACR;IACA;IACA,MAAMa,CAAC,GAAGb,MAAM,CAACc,IAAI,CAACC,MAAM;IAC5B,IAAIF,CAAC,EAAE;MAAA,IAAAG,SAAA;MACH,MAAMC,EAAE,GAAAC,aAAA,MAAAF,SAAA,GAAS,IAAI,CAACJ,GAAG,CAACC,CAAC,CAAC,cAAAG,SAAA,cAAAA,SAAA,GAAI,CAAC,CAAC,CAAG;MACrC,OAAOC,EAAE,CAACV,EAAE,CAAC,CAAC;MACd,OAAAW,aAAA,CAAAA,aAAA,KAAYD,EAAE,GAAK,IAAI,CAACtB,IAAI,CAACiB,GAAG,CAACZ,MAAM,CAAC;IAC5C;IACA,OAAO,IAAI,CAACL,IAAI,CAACiB,GAAG,CAACZ,MAAM,CAAC;EAChC;EACAM,GAAGA,CAACN,MAAM,EAAE;IACR,OAAO,IAAI,CAACL,IAAI,CAACW,GAAG,CAACN,MAAM,CAAC;EAChC;AACJ;AACA;AACA,OAAO,SAASmB,QAAQA,CAAA,EAAG;EACvB,OAAO,IAAI1B,YAAY,CAAC,CAAC;AAC7B;AACA,OAAO,MAAM2B,cAAc,GAAG,aAAcD,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}