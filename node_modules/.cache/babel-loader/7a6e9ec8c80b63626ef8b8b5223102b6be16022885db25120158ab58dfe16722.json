{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { db } from \"../firebase\";\nimport { doc, getDoc, setDoc, updateDoc, arrayUnion, arrayRemove } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\n\n// Hook for managing liked products for the current user\nexport default function useLikedProducts() {\n  _s();\n  const [liked, setLiked] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const auth = getAuth();\n  const user = auth.currentUser;\n  useEffect(() => {\n    if (!user) {\n      setLiked([]);\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    const ref = doc(db, \"users\", user.uid);\n    getDoc(ref).then(snap => {\n      if (snap.exists() && snap.data().likedProducts) {\n        setLiked(snap.data().likedProducts);\n      } else {\n        setLiked([]);\n      }\n      setLoading(false);\n    });\n  }, [user]);\n  const likeProduct = useCallback(async productId => {\n    if (!user) return;\n    setLiked(prev => prev.includes(productId) ? prev : [...prev, productId]);\n    const ref = doc(db, \"users\", user.uid);\n    await setDoc(ref, {\n      likedProducts: arrayUnion(productId)\n    }, {\n      merge: true\n    });\n  }, [user]);\n  const unlikeProduct = useCallback(async productId => {\n    if (!user) return;\n    setLiked(prev => prev.filter(id => id !== productId));\n    const ref = doc(db, \"users\", user.uid);\n    await updateDoc(ref, {\n      likedProducts: arrayRemove(productId)\n    });\n  }, [user]);\n  const isProductLiked = useCallback(productId => liked.includes(productId), [liked]);\n  return {\n    liked,\n    loading,\n    likeProduct,\n    unlikeProduct,\n    isProductLiked\n  };\n}\n_s(useLikedProducts, \"PS4qpEpkqFgT2nJs80D0MfAxUsA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","db","doc","getDoc","setDoc","updateDoc","arrayUnion","arrayRemove","getAuth","useLikedProducts","_s","liked","setLiked","loading","setLoading","auth","user","currentUser","ref","uid","then","snap","exists","data","likedProducts","likeProduct","productId","prev","includes","merge","unlikeProduct","filter","id","isProductLiked"],"sources":["C:/RR_V3/src/hooks/useLikedProducts.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { db } from \"../firebase\";\nimport {\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  arrayUnion,\n  arrayRemove,\n} from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\n\n// Hook for managing liked products for the current user\nexport default function useLikedProducts() {\n  const [liked, setLiked] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  useEffect(() => {\n    if (!user) {\n      setLiked([]);\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    const ref = doc(db, \"users\", user.uid);\n    getDoc(ref).then((snap) => {\n      if (snap.exists() && snap.data().likedProducts) {\n        setLiked(snap.data().likedProducts);\n      } else {\n        setLiked([]);\n      }\n      setLoading(false);\n    });\n  }, [user]);\n\n  const likeProduct = useCallback(\n    async (productId) => {\n      if (!user) return;\n      setLiked((prev) => (prev.includes(productId) ? prev : [...prev, productId]));\n      const ref = doc(db, \"users\", user.uid);\n      await setDoc(ref, { likedProducts: arrayUnion(productId) }, { merge: true });\n    },\n    [user]\n  );\n\n  const unlikeProduct = useCallback(\n    async (productId) => {\n      if (!user) return;\n      setLiked((prev) => prev.filter((id) => id !== productId));\n      const ref = doc(db, \"users\", user.uid);\n      await updateDoc(ref, { likedProducts: arrayRemove(productId) });\n    },\n    [user]\n  );\n\n  const isProductLiked = useCallback(\n    (productId) => liked.includes(productId),\n    [liked]\n  );\n\n  return { liked, loading, likeProduct, unlikeProduct, isProductLiked };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,EAAE,QAAQ,aAAa;AAChC,SACEC,GAAG,EACHC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,WAAW,QACN,oBAAoB;AAC3B,SAASC,OAAO,QAAQ,eAAe;;AAEvC;AACA,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMiB,IAAI,GAAGP,OAAO,CAAC,CAAC;EACtB,MAAMQ,IAAI,GAAGD,IAAI,CAACE,WAAW;EAE7BlB,SAAS,CAAC,MAAM;IACd,IAAI,CAACiB,IAAI,EAAE;MACTJ,QAAQ,CAAC,EAAE,CAAC;MACZE,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IACAA,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMI,GAAG,GAAGhB,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEe,IAAI,CAACG,GAAG,CAAC;IACtChB,MAAM,CAACe,GAAG,CAAC,CAACE,IAAI,CAAEC,IAAI,IAAK;MACzB,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,IAAID,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,aAAa,EAAE;QAC9CZ,QAAQ,CAACS,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,aAAa,CAAC;MACrC,CAAC,MAAM;QACLZ,QAAQ,CAAC,EAAE,CAAC;MACd;MACAE,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACE,IAAI,CAAC,CAAC;EAEV,MAAMS,WAAW,GAAGzB,WAAW,CAC7B,MAAO0B,SAAS,IAAK;IACnB,IAAI,CAACV,IAAI,EAAE;IACXJ,QAAQ,CAAEe,IAAI,IAAMA,IAAI,CAACC,QAAQ,CAACF,SAAS,CAAC,GAAGC,IAAI,GAAG,CAAC,GAAGA,IAAI,EAAED,SAAS,CAAE,CAAC;IAC5E,MAAMR,GAAG,GAAGhB,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEe,IAAI,CAACG,GAAG,CAAC;IACtC,MAAMf,MAAM,CAACc,GAAG,EAAE;MAAEM,aAAa,EAAElB,UAAU,CAACoB,SAAS;IAAE,CAAC,EAAE;MAAEG,KAAK,EAAE;IAAK,CAAC,CAAC;EAC9E,CAAC,EACD,CAACb,IAAI,CACP,CAAC;EAED,MAAMc,aAAa,GAAG9B,WAAW,CAC/B,MAAO0B,SAAS,IAAK;IACnB,IAAI,CAACV,IAAI,EAAE;IACXJ,QAAQ,CAAEe,IAAI,IAAKA,IAAI,CAACI,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKN,SAAS,CAAC,CAAC;IACzD,MAAMR,GAAG,GAAGhB,GAAG,CAACD,EAAE,EAAE,OAAO,EAAEe,IAAI,CAACG,GAAG,CAAC;IACtC,MAAMd,SAAS,CAACa,GAAG,EAAE;MAAEM,aAAa,EAAEjB,WAAW,CAACmB,SAAS;IAAE,CAAC,CAAC;EACjE,CAAC,EACD,CAACV,IAAI,CACP,CAAC;EAED,MAAMiB,cAAc,GAAGjC,WAAW,CAC/B0B,SAAS,IAAKf,KAAK,CAACiB,QAAQ,CAACF,SAAS,CAAC,EACxC,CAACf,KAAK,CACR,CAAC;EAED,OAAO;IAAEA,KAAK;IAAEE,OAAO;IAAEY,WAAW;IAAEK,aAAa;IAAEG;EAAe,CAAC;AACvE;AAACvB,EAAA,CAlDuBD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}