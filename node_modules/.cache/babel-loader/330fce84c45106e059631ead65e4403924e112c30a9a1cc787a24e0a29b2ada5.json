{"ast":null,"code":"import { _array, _tuple, _unknown } from \"./api.js\";\nimport { parse, parseAsync } from \"./parse.js\";\nimport * as schemas from \"./schemas.js\";\nimport { $ZodTuple } from \"./schemas.js\";\nexport class $ZodFunction {\n  constructor(def) {\n    this._def = def;\n    this.def = def;\n  }\n  implement(func) {\n    var _this = this;\n    if (typeof func !== \"function\") {\n      throw new Error(\"implement() must be called with a function\");\n    }\n    const impl = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const parsedArgs = _this._def.input ? parse(_this._def.input, args, undefined, {\n        callee: impl\n      }) : args;\n      if (!Array.isArray(parsedArgs)) {\n        throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\n      }\n      const output = func(...parsedArgs);\n      return _this._def.output ? parse(_this._def.output, output, undefined, {\n        callee: impl\n      }) : output;\n    };\n    return impl;\n  }\n  implementAsync(func) {\n    var _this2 = this;\n    if (typeof func !== \"function\") {\n      throw new Error(\"implement() must be called with a function\");\n    }\n    const impl = async function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const parsedArgs = _this2._def.input ? await parseAsync(_this2._def.input, args, undefined, {\n        callee: impl\n      }) : args;\n      if (!Array.isArray(parsedArgs)) {\n        throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\n      }\n      const output = await func(...parsedArgs);\n      return _this2._def.output ? parseAsync(_this2._def.output, output, undefined, {\n        callee: impl\n      }) : output;\n    };\n    return impl;\n  }\n  input() {\n    const F = this.constructor;\n    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {\n      return new F({\n        type: \"function\",\n        input: new $ZodTuple({\n          type: \"tuple\",\n          items: arguments.length <= 0 ? undefined : arguments[0],\n          rest: arguments.length <= 1 ? undefined : arguments[1]\n        }),\n        output: this._def.output\n      });\n    }\n    return new F({\n      type: \"function\",\n      input: arguments.length <= 0 ? undefined : arguments[0],\n      output: this._def.output\n    });\n  }\n  output(output) {\n    const F = this.constructor;\n    return new F({\n      type: \"function\",\n      input: this._def.input,\n      output\n    });\n  }\n}\nfunction _function(params) {\n  var _params$input, _params$output;\n  return new $ZodFunction({\n    type: \"function\",\n    input: Array.isArray(params === null || params === void 0 ? void 0 : params.input) ? _tuple(schemas.$ZodTuple, params === null || params === void 0 ? void 0 : params.input) : (_params$input = params === null || params === void 0 ? void 0 : params.input) !== null && _params$input !== void 0 ? _params$input : _array(schemas.$ZodArray, _unknown(schemas.$ZodUnknown)),\n    output: (_params$output = params === null || params === void 0 ? void 0 : params.output) !== null && _params$output !== void 0 ? _params$output : _unknown(schemas.$ZodUnknown)\n  });\n}\nexport { _function as function };","map":{"version":3,"names":["_array","_tuple","_unknown","parse","parseAsync","schemas","$ZodTuple","$ZodFunction","constructor","def","_def","implement","func","_this","Error","impl","_len","arguments","length","args","Array","_key","parsedArgs","input","undefined","callee","isArray","output","implementAsync","_this2","_len2","_key2","F","type","items","rest","_function","params","_params$input","_params$output","$ZodArray","$ZodUnknown","function"],"sources":["C:/RR_V3/node_modules/zod/dist/esm/v4/core/function.js"],"sourcesContent":["import { _array, _tuple, _unknown } from \"./api.js\";\nimport { parse, parseAsync } from \"./parse.js\";\nimport * as schemas from \"./schemas.js\";\nimport { $ZodTuple } from \"./schemas.js\";\nexport class $ZodFunction {\n    constructor(def) {\n        this._def = def;\n        this.def = def;\n    }\n    implement(func) {\n        if (typeof func !== \"function\") {\n            throw new Error(\"implement() must be called with a function\");\n        }\n        const impl = ((...args) => {\n            const parsedArgs = this._def.input ? parse(this._def.input, args, undefined, { callee: impl }) : args;\n            if (!Array.isArray(parsedArgs)) {\n                throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\n            }\n            const output = func(...parsedArgs);\n            return this._def.output ? parse(this._def.output, output, undefined, { callee: impl }) : output;\n        });\n        return impl;\n    }\n    implementAsync(func) {\n        if (typeof func !== \"function\") {\n            throw new Error(\"implement() must be called with a function\");\n        }\n        const impl = (async (...args) => {\n            const parsedArgs = this._def.input ? await parseAsync(this._def.input, args, undefined, { callee: impl }) : args;\n            if (!Array.isArray(parsedArgs)) {\n                throw new Error(\"Invalid arguments schema: not an array or tuple schema.\");\n            }\n            const output = await func(...parsedArgs);\n            return this._def.output ? parseAsync(this._def.output, output, undefined, { callee: impl }) : output;\n        });\n        return impl;\n    }\n    input(...args) {\n        const F = this.constructor;\n        if (Array.isArray(args[0])) {\n            return new F({\n                type: \"function\",\n                input: new $ZodTuple({\n                    type: \"tuple\",\n                    items: args[0],\n                    rest: args[1],\n                }),\n                output: this._def.output,\n            });\n        }\n        return new F({\n            type: \"function\",\n            input: args[0],\n            output: this._def.output,\n        });\n    }\n    output(output) {\n        const F = this.constructor;\n        return new F({\n            type: \"function\",\n            input: this._def.input,\n            output,\n        });\n    }\n}\nfunction _function(params) {\n    return new $ZodFunction({\n        type: \"function\",\n        input: Array.isArray(params?.input)\n            ? _tuple(schemas.$ZodTuple, params?.input)\n            : (params?.input ?? _array(schemas.$ZodArray, _unknown(schemas.$ZodUnknown))),\n        output: params?.output ?? _unknown(schemas.$ZodUnknown),\n    });\n}\nexport { _function as function };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,UAAU;AACnD,SAASC,KAAK,EAAEC,UAAU,QAAQ,YAAY;AAC9C,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAWA,CAACC,GAAG,EAAE;IACb,IAAI,CAACC,IAAI,GAAGD,GAAG;IACf,IAAI,CAACA,GAAG,GAAGA,GAAG;EAClB;EACAE,SAASA,CAACC,IAAI,EAAE;IAAA,IAAAC,KAAA;IACZ,IAAI,OAAOD,IAAI,KAAK,UAAU,EAAE;MAC5B,MAAM,IAAIE,KAAK,CAAC,4CAA4C,CAAC;IACjE;IACA,MAAMC,IAAI,GAAI,SAAAA,CAAA,EAAa;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAClB,MAAMC,UAAU,GAAGT,KAAI,CAACH,IAAI,CAACa,KAAK,GAAGpB,KAAK,CAACU,KAAI,CAACH,IAAI,CAACa,KAAK,EAAEJ,IAAI,EAAEK,SAAS,EAAE;QAAEC,MAAM,EAAEV;MAAK,CAAC,CAAC,GAAGI,IAAI;MACrG,IAAI,CAACC,KAAK,CAACM,OAAO,CAACJ,UAAU,CAAC,EAAE;QAC5B,MAAM,IAAIR,KAAK,CAAC,yDAAyD,CAAC;MAC9E;MACA,MAAMa,MAAM,GAAGf,IAAI,CAAC,GAAGU,UAAU,CAAC;MAClC,OAAOT,KAAI,CAACH,IAAI,CAACiB,MAAM,GAAGxB,KAAK,CAACU,KAAI,CAACH,IAAI,CAACiB,MAAM,EAAEA,MAAM,EAAEH,SAAS,EAAE;QAAEC,MAAM,EAAEV;MAAK,CAAC,CAAC,GAAGY,MAAM;IACnG,CAAE;IACF,OAAOZ,IAAI;EACf;EACAa,cAAcA,CAAChB,IAAI,EAAE;IAAA,IAAAiB,MAAA;IACjB,IAAI,OAAOjB,IAAI,KAAK,UAAU,EAAE;MAC5B,MAAM,IAAIE,KAAK,CAAC,4CAA4C,CAAC;IACjE;IACA,MAAMC,IAAI,GAAI,eAAAA,CAAA,EAAmB;MAAA,SAAAe,KAAA,GAAAb,SAAA,CAAAC,MAAA,EAATC,IAAI,OAAAC,KAAA,CAAAU,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAJZ,IAAI,CAAAY,KAAA,IAAAd,SAAA,CAAAc,KAAA;MAAA;MACxB,MAAMT,UAAU,GAAGO,MAAI,CAACnB,IAAI,CAACa,KAAK,GAAG,MAAMnB,UAAU,CAACyB,MAAI,CAACnB,IAAI,CAACa,KAAK,EAAEJ,IAAI,EAAEK,SAAS,EAAE;QAAEC,MAAM,EAAEV;MAAK,CAAC,CAAC,GAAGI,IAAI;MAChH,IAAI,CAACC,KAAK,CAACM,OAAO,CAACJ,UAAU,CAAC,EAAE;QAC5B,MAAM,IAAIR,KAAK,CAAC,yDAAyD,CAAC;MAC9E;MACA,MAAMa,MAAM,GAAG,MAAMf,IAAI,CAAC,GAAGU,UAAU,CAAC;MACxC,OAAOO,MAAI,CAACnB,IAAI,CAACiB,MAAM,GAAGvB,UAAU,CAACyB,MAAI,CAACnB,IAAI,CAACiB,MAAM,EAAEA,MAAM,EAAEH,SAAS,EAAE;QAAEC,MAAM,EAAEV;MAAK,CAAC,CAAC,GAAGY,MAAM;IACxG,CAAE;IACF,OAAOZ,IAAI;EACf;EACAQ,KAAKA,CAAA,EAAU;IACX,MAAMS,CAAC,GAAG,IAAI,CAACxB,WAAW;IAC1B,IAAIY,KAAK,CAACM,OAAO,CAAAT,SAAA,CAAAC,MAAA,QAAAM,SAAA,GAAAP,SAAA,GAAQ,CAAC,EAAE;MACxB,OAAO,IAAIe,CAAC,CAAC;QACTC,IAAI,EAAE,UAAU;QAChBV,KAAK,EAAE,IAAIjB,SAAS,CAAC;UACjB2B,IAAI,EAAE,OAAO;UACbC,KAAK,EAAAjB,SAAA,CAAAC,MAAA,QAAAM,SAAA,GAAAP,SAAA,GAAS;UACdkB,IAAI,EAAAlB,SAAA,CAAAC,MAAA,QAAAM,SAAA,GAAAP,SAAA;QACR,CAAC,CAAC;QACFU,MAAM,EAAE,IAAI,CAACjB,IAAI,CAACiB;MACtB,CAAC,CAAC;IACN;IACA,OAAO,IAAIK,CAAC,CAAC;MACTC,IAAI,EAAE,UAAU;MAChBV,KAAK,EAAAN,SAAA,CAAAC,MAAA,QAAAM,SAAA,GAAAP,SAAA,GAAS;MACdU,MAAM,EAAE,IAAI,CAACjB,IAAI,CAACiB;IACtB,CAAC,CAAC;EACN;EACAA,MAAMA,CAACA,MAAM,EAAE;IACX,MAAMK,CAAC,GAAG,IAAI,CAACxB,WAAW;IAC1B,OAAO,IAAIwB,CAAC,CAAC;MACTC,IAAI,EAAE,UAAU;MAChBV,KAAK,EAAE,IAAI,CAACb,IAAI,CAACa,KAAK;MACtBI;IACJ,CAAC,CAAC;EACN;AACJ;AACA,SAASS,SAASA,CAACC,MAAM,EAAE;EAAA,IAAAC,aAAA,EAAAC,cAAA;EACvB,OAAO,IAAIhC,YAAY,CAAC;IACpB0B,IAAI,EAAE,UAAU;IAChBV,KAAK,EAAEH,KAAK,CAACM,OAAO,CAACW,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEd,KAAK,CAAC,GAC7BtB,MAAM,CAACI,OAAO,CAACC,SAAS,EAAE+B,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEd,KAAK,CAAC,IAAAe,aAAA,GACvCD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEd,KAAK,cAAAe,aAAA,cAAAA,aAAA,GAAItC,MAAM,CAACK,OAAO,CAACmC,SAAS,EAAEtC,QAAQ,CAACG,OAAO,CAACoC,WAAW,CAAC,CAAE;IACjFd,MAAM,GAAAY,cAAA,GAAEF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEV,MAAM,cAAAY,cAAA,cAAAA,cAAA,GAAIrC,QAAQ,CAACG,OAAO,CAACoC,WAAW;EAC1D,CAAC,CAAC;AACN;AACA,SAASL,SAAS,IAAIM,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}