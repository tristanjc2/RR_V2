{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"tecken\",\n      verb: \"att ha\"\n    },\n    file: {\n      unit: \"bytes\",\n      verb: \"att ha\"\n    },\n    array: {\n      unit: \"objekt\",\n      verb: \"att innehålla\"\n    },\n    set: {\n      unit: \"objekt\",\n      verb: \"att innehålla\"\n    }\n  };\n  function getSizing(origin) {\n    var _Sizable$origin;\n    return (_Sizable$origin = Sizable[origin]) !== null && _Sizable$origin !== void 0 ? _Sizable$origin : null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"antal\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"lista\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"reguljärt uttryck\",\n    email: \"e-postadress\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO-datum och tid\",\n    date: \"ISO-datum\",\n    time: \"ISO-tid\",\n    duration: \"ISO-varaktighet\",\n    ipv4: \"IPv4-intervall\",\n    ipv6: \"IPv6-intervall\",\n    cidrv4: \"IPv4-spektrum\",\n    cidrv6: \"IPv6-spektrum\",\n    base64: \"base64-kodad sträng\",\n    base64url: \"base64url-kodad sträng\",\n    json_string: \"JSON-sträng\",\n    e164: \"E.164-nummer\",\n    jwt: \"JWT\",\n    template_literal: \"mall-literal\"\n  };\n  return issue => {\n    var _issue$origin5, _issue$origin6;\n    switch (issue.code) {\n      case \"invalid_type\":\n        return \"Ogiltig inmatning: f\\xF6rv\\xE4ntat \".concat(issue.expected, \", fick \").concat(parsedType(issue.input));\n      case \"invalid_value\":\n        if (issue.values.length === 1) return \"Ogiltig inmatning: f\\xF6rv\\xE4ntat \".concat(util.stringifyPrimitive(issue.values[0]));\n        return \"Ogiltigt val: f\\xF6rv\\xE4ntade en av \".concat(util.joinValues(issue.values, \"|\"));\n      case \"too_big\":\n        {\n          var _issue$origin2;\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            var _issue$origin, _sizing$unit;\n            return \"F\\xF6r stor(t): f\\xF6rv\\xE4ntade \".concat((_issue$origin = issue.origin) !== null && _issue$origin !== void 0 ? _issue$origin : \"värdet\", \" att ha \").concat(adj).concat(issue.maximum.toString(), \" \").concat((_sizing$unit = sizing.unit) !== null && _sizing$unit !== void 0 ? _sizing$unit : \"element\");\n          }\n          return \"F\\xF6r stor(t): f\\xF6rv\\xE4ntat \".concat((_issue$origin2 = issue.origin) !== null && _issue$origin2 !== void 0 ? _issue$origin2 : \"värdet\", \" att ha \").concat(adj).concat(issue.maximum.toString());\n        }\n      case \"too_small\":\n        {\n          var _issue$origin4;\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            var _issue$origin3;\n            return \"F\\xF6r lite(t): f\\xF6rv\\xE4ntade \".concat((_issue$origin3 = issue.origin) !== null && _issue$origin3 !== void 0 ? _issue$origin3 : \"värdet\", \" att ha \").concat(adj).concat(issue.minimum.toString(), \" \").concat(sizing.unit);\n          }\n          return \"F\\xF6r lite(t): f\\xF6rv\\xE4ntade \".concat((_issue$origin4 = issue.origin) !== null && _issue$origin4 !== void 0 ? _issue$origin4 : \"värdet\", \" att ha \").concat(adj).concat(issue.minimum.toString());\n        }\n      case \"invalid_format\":\n        {\n          var _Nouns$_issue$format;\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return \"Ogiltig str\\xE4ng: m\\xE5ste b\\xF6rja med \\\"\".concat(_issue.prefix, \"\\\"\");\n          }\n          if (_issue.format === \"ends_with\") return \"Ogiltig str\\xE4ng: m\\xE5ste sluta med \\\"\".concat(_issue.suffix, \"\\\"\");\n          if (_issue.format === \"includes\") return \"Ogiltig str\\xE4ng: m\\xE5ste inneh\\xE5lla \\\"\".concat(_issue.includes, \"\\\"\");\n          if (_issue.format === \"regex\") return \"Ogiltig str\\xE4ng: m\\xE5ste matcha m\\xF6nstret \\\"\".concat(_issue.pattern, \"\\\"\");\n          return \"Ogiltig(t) \".concat((_Nouns$_issue$format = Nouns[_issue.format]) !== null && _Nouns$_issue$format !== void 0 ? _Nouns$_issue$format : issue.format);\n        }\n      case \"not_multiple_of\":\n        return \"Ogiltigt tal: m\\xE5ste vara en multipel av \".concat(issue.divisor);\n      case \"unrecognized_keys\":\n        return \"\".concat(issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\", \": \").concat(util.joinValues(issue.keys, \", \"));\n      case \"invalid_key\":\n        return \"Ogiltig nyckel i \".concat((_issue$origin5 = issue.origin) !== null && _issue$origin5 !== void 0 ? _issue$origin5 : \"värdet\");\n      case \"invalid_union\":\n        return \"Ogiltig input\";\n      case \"invalid_element\":\n        return \"Ogiltigt v\\xE4rde i \".concat((_issue$origin6 = issue.origin) !== null && _issue$origin6 !== void 0 ? _issue$origin6 : \"värdet\");\n      default:\n        return \"Ogiltig input\";\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":{"version":3,"names":["util","error","Sizable","string","unit","verb","file","array","set","getSizing","origin","_Sizable$origin","parsedType","data","t","Number","isNaN","Array","isArray","Object","getPrototypeOf","prototype","constructor","name","Nouns","regex","email","url","emoji","uuid","uuidv4","uuidv6","nanoid","guid","cuid","cuid2","ulid","xid","ksuid","datetime","date","time","duration","ipv4","ipv6","cidrv4","cidrv6","base64","base64url","json_string","e164","jwt","template_literal","issue","_issue$origin5","_issue$origin6","code","concat","expected","input","values","length","stringifyPrimitive","joinValues","_issue$origin2","adj","inclusive","sizing","_issue$origin","_sizing$unit","maximum","toString","_issue$origin4","_issue$origin3","minimum","_Nouns$_issue$format","_issue","format","prefix","suffix","includes","pattern","divisor","keys","localeError"],"sources":["C:/RR_V3/node_modules/zod/dist/esm/v4/locales/sv.js"],"sourcesContent":["import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"tecken\", verb: \"att ha\" },\n        file: { unit: \"bytes\", verb: \"att ha\" },\n        array: { unit: \"objekt\", verb: \"att innehålla\" },\n        set: { unit: \"objekt\", verb: \"att innehålla\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"antal\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"lista\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"reguljärt uttryck\",\n        email: \"e-postadress\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO-datum och tid\",\n        date: \"ISO-datum\",\n        time: \"ISO-tid\",\n        duration: \"ISO-varaktighet\",\n        ipv4: \"IPv4-intervall\",\n        ipv6: \"IPv6-intervall\",\n        cidrv4: \"IPv4-spektrum\",\n        cidrv6: \"IPv6-spektrum\",\n        base64: \"base64-kodad sträng\",\n        base64url: \"base64url-kodad sträng\",\n        json_string: \"JSON-sträng\",\n        e164: \"E.164-nummer\",\n        jwt: \"JWT\",\n        template_literal: \"mall-literal\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ogiltig inmatning: förväntat ${issue.expected}, fick ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ogiltig inmatning: förväntat ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ogiltigt val: förväntade en av ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `För stor(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\n                }\n                return `För stor(t): förväntat ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Ogiltig sträng: måste börja med \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Ogiltig sträng: måste sluta med \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ogiltig sträng: måste innehålla \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ogiltig sträng: måste matcha mönstret \"${_issue.pattern}\"`;\n                return `Ogiltig(t) ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ogiltigt tal: måste vara en multipel av ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ogiltig nyckel i ${issue.origin ?? \"värdet\"}`;\n            case \"invalid_union\":\n                return \"Ogiltig input\";\n            case \"invalid_element\":\n                return `Ogiltigt värde i ${issue.origin ?? \"värdet\"}`;\n            default:\n                return `Ogiltig input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}